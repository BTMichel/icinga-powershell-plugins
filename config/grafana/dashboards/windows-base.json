{
    "annotations": {
      "list": [
        {
          "builtIn": 1,
          "datasource": {
            "type": "grafana",
            "uid": "-- Grafana --"
          },
          "enable": true,
          "hide": true,
          "iconColor": "rgba(0, 211, 255, 1)",
          "name": "Annotations & Alerts",
          "target": {
            "limit": 100,
            "matchAny": false,
            "tags": [],
            "type": "dashboard"
          },
          "type": "dashboard"
        }
      ]
    },
    "editable": true,
    "fiscalYearStartMonth": 0,
    "graphTooltip": 0,
    "id": 11,
    "iteration": 1659449714105,
    "links": [],
    "liveNow": false,
    "panels": [
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 0
        },
        "id": 55,
        "panels": [],
        "title": "Windows Updates",
        "type": "row"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "noValue": "0",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 7,
          "w": 4,
          "x": 0,
          "y": 1
        },
        "id": 64,
        "options": {
          "colorMode": "value",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "8.5.3",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"summary::ifw_updates::count\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Total Updates"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": true,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"warn\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"summary::ifw_updates::count\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Warning\") }))",
            "refId": "Warning"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": true,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"crit\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"summary::ifw_updates::count\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Critical\") }))",
            "refId": "Critical"
          }
        ],
        "title": "Total Pending Updates",
        "type": "stat"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "noValue": "0",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 7,
          "w": 4,
          "x": 4,
          "y": 1
        },
        "id": 67,
        "options": {
          "colorMode": "value",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "8.5.3",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"defender::ifw_updates::count\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Total Updates"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": true,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"warn\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"defender::ifw_updates::count\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Warning\") }))",
            "refId": "Warning"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": true,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"crit\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"defender::ifw_updates::count\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Critical\") }))",
            "refId": "Critical"
          }
        ],
        "title": "Defender Updates",
        "type": "stat"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "noValue": "0",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 7,
          "w": 4,
          "x": 8,
          "y": 1
        },
        "id": 65,
        "options": {
          "colorMode": "value",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "8.5.3",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"security::ifw_updates::count\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Total Updates"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": true,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"warn\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"security::ifw_updates::count\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Warning\") }))",
            "refId": "Warning"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": true,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"crit\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"security::ifw_updates::count\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Critical\") }))",
            "refId": "Critical"
          }
        ],
        "title": "Security Updates",
        "type": "stat"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "noValue": "0",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 7,
          "w": 4,
          "x": 12,
          "y": 1
        },
        "id": 66,
        "options": {
          "colorMode": "value",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "8.5.3",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"rollups::ifw_updates::count\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Total Updates"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": true,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"warn\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"rollups::ifw_updates::count\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Warning\") }))",
            "refId": "Warning"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": true,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"crit\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"rollups::ifw_updates::count\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Critical\") }))",
            "refId": "Critical"
          }
        ],
        "title": "Rollup Updates",
        "type": "stat"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "noValue": "0",
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 7,
          "w": 4,
          "x": 16,
          "y": 1
        },
        "id": 68,
        "options": {
          "colorMode": "value",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "8.5.3",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"other::ifw_updates::count\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Total Updates"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": true,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"warn\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"other::ifw_updates::count\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Warning\") }))",
            "refId": "Warning"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": true,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"crit\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"other::ifw_updates::count\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Critical\") }))",
            "refId": "Critical"
          }
        ],
        "title": "Other Updates",
        "type": "stat"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 8
        },
        "id": 2,
        "panels": [],
        "title": "CPU",
        "type": "row"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "lineInterpolation": "linear",
              "lineWidth": 1,
              "pointSize": 3,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "mappings": [],
            "max": 100,
            "min": 0,
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "percent"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Critical"
              },
              "properties": [
                {
                  "id": "custom.lineStyle",
                  "value": {
                    "dash": [
                      10,
                      10
                    ],
                    "fill": "dash"
                  }
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "red",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Warning"
              },
              "properties": [
                {
                  "id": "custom.lineStyle",
                  "value": {
                    "dash": [
                      10,
                      10
                    ],
                    "fill": "dash"
                  }
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "yellow",
                    "mode": "fixed"
                  }
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 8,
          "w": 24,
          "x": 0,
          "y": 9
        },
        "id": 4,
        "libraryPanel": {
          "description": "",
          "meta": {
            "connectedDashboards": 2,
            "created": "2022-05-31T11:45:08Z",
            "createdBy": {
              "avatarUrl": "/avatar/56fe94225e225b888240c4c7f5533989",
              "id": 3,
              "name": "cstein"
            },
            "folderName": "Icinga for Windows",
            "folderUid": "QSsH1n9nk",
            "updated": "2022-05-31T11:45:08Z",
            "updatedBy": {
              "avatarUrl": "/avatar/56fe94225e225b888240c4c7f5533989",
              "id": 3,
              "name": "cstein"
            }
          },
          "name": "template-cpu",
          "type": "timeseries",
          "uid": "rb24sor7k",
          "version": 1
        },
        "maxPerRow": 4,
        "options": {
          "legend": {
            "calcs": [
              "lastNotNull"
            ],
            "displayMode": "table",
            "placement": "bottom"
          },
          "tooltip": {
            "mode": "multi",
            "sort": "asc"
          }
        },
        "repeat": "cpucores",
        "repeatDirection": "h",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric =~ /^(${cpucores}::ifw_cpu::load)/)\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Value"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"warn\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric =~ /^(${cpucores}::ifw_cpu::load)/)\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Warning\") }))",
            "refId": "Warning"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"crit\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric =~ /^(${cpucores}::ifw_cpu::load)/)\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Critical\") }))",
            "refId": "Critical"
          }
        ],
        "title": "${hostname} CPU ${cpucores}",
        "transformations": [
          {
            "id": "renameByRegex",
            "options": {
              "regex": "::ifw_cpu::load",
              "renamePattern": " load"
            }
          }
        ],
        "type": "timeseries"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 17
        },
        "id": 13,
        "panels": [],
        "title": "Memory",
        "type": "row"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "lineInterpolation": "linear",
              "lineWidth": 1,
              "pointSize": 3,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "bytes"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Critical"
              },
              "properties": [
                {
                  "id": "custom.lineStyle",
                  "value": {
                    "dash": [
                      10,
                      10
                    ],
                    "fill": "dash"
                  }
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "red",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Warning"
              },
              "properties": [
                {
                  "id": "custom.lineStyle",
                  "value": {
                    "dash": [
                      10,
                      10
                    ],
                    "fill": "dash"
                  }
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "yellow",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Maximum"
              },
              "properties": [
                {
                  "id": "custom.drawStyle",
                  "value": "points"
                },
                {
                  "id": "custom.pointSize",
                  "value": 2
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "blue",
                    "mode": "fixed"
                  }
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 8,
          "w": 24,
          "x": 0,
          "y": 18
        },
        "id": 19,
        "maxPerRow": 4,
        "options": {
          "legend": {
            "calcs": [
              "lastNotNull"
            ],
            "displayMode": "table",
            "placement": "bottom"
          },
          "tooltip": {
            "mode": "multi",
            "sort": "asc"
          }
        },
        "repeatDirection": "h",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric =~ /^(memory::ifw_memory::used)/)\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Value"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"warn\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric =~ /^(memory::ifw_memory::used)/)\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Warning\") }))",
            "refId": "Warning"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"crit\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric =~ /^(memory::ifw_memory::used)/)\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Critical\") }))",
            "refId": "Critical"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"max\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric =~ /^(memory::ifw_memory::used)/)\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: \"memory Limit\" }))",
            "refId": "Maximum"
          }
        ],
        "title": "${hostname} Memory",
        "transformations": [
          {
            "id": "renameByRegex",
            "options": {
              "regex": "::ifw_memory::used",
              "renamePattern": " used"
            }
          }
        ],
        "type": "timeseries"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "lineInterpolation": "linear",
              "lineWidth": 1,
              "pointSize": 3,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "bytes"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Critical"
              },
              "properties": [
                {
                  "id": "custom.lineStyle",
                  "value": {
                    "dash": [
                      10,
                      10
                    ],
                    "fill": "dash"
                  }
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "red",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Warning"
              },
              "properties": [
                {
                  "id": "custom.lineStyle",
                  "value": {
                    "dash": [
                      10,
                      10
                    ],
                    "fill": "dash"
                  }
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "yellow",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Maximum"
              },
              "properties": [
                {
                  "id": "custom.drawStyle",
                  "value": "points"
                },
                {
                  "id": "custom.pointSize",
                  "value": 2
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "blue",
                    "mode": "fixed"
                  }
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 7,
          "w": 24,
          "x": 0,
          "y": 26
        },
        "id": 16,
        "maxPerRow": 4,
        "options": {
          "legend": {
            "calcs": [
              "lastNotNull"
            ],
            "displayMode": "table",
            "placement": "bottom"
          },
          "tooltip": {
            "mode": "multi",
            "sort": "asc"
          }
        },
        "repeat": "pagefiles",
        "repeatDirection": "h",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric =~ /^(${pagefiles}::ifw_pagefile::used)/)\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Value"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"warn\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric =~ /^(${pagefiles}::ifw_pagefile::used)/)\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Warning\") }))",
            "refId": "Warning"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"crit\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric =~ /^(${pagefiles}::ifw_pagefile::used)/)\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Critical\") }))",
            "refId": "Critical"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"max\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric =~ /^(${pagefiles}::ifw_pagefile::used)/)\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: \"Pagefile Limit\" }))",
            "refId": "Maximum"
          }
        ],
        "title": "${hostname} Pagefile ${pagefiles}",
        "transformations": [
          {
            "id": "renameByRegex",
            "options": {
              "regex": "::ifw_pagefile::used",
              "renamePattern": " used"
            }
          }
        ],
        "type": "timeseries"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 33
        },
        "id": 6,
        "panels": [],
        "title": "Disks",
        "type": "row"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "lineInterpolation": "linear",
              "lineWidth": 1,
              "pointSize": 3,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                }
              ]
            },
            "unit": "bytes"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Critical"
              },
              "properties": [
                {
                  "id": "custom.lineStyle",
                  "value": {
                    "dash": [
                      10,
                      10
                    ],
                    "fill": "dash"
                  }
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "red",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Warning"
              },
              "properties": [
                {
                  "id": "custom.lineStyle",
                  "value": {
                    "dash": [
                      10,
                      10
                    ],
                    "fill": "dash"
                  }
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "yellow",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Size"
              },
              "properties": [
                {
                  "id": "custom.drawStyle",
                  "value": "points"
                },
                {
                  "id": "custom.pointSize",
                  "value": 2
                },
                {
                  "id": "displayName",
                  "value": "Partition Size"
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "blue",
                    "mode": "fixed"
                  }
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 8,
          "w": 6,
          "x": 0,
          "y": 34
        },
        "id": 9,
        "libraryPanel": {
          "description": "",
          "meta": {
            "connectedDashboards": 2,
            "created": "2022-05-31T11:45:44Z",
            "createdBy": {
              "avatarUrl": "/avatar/56fe94225e225b888240c4c7f5533989",
              "id": 3,
              "name": "cstein"
            },
            "folderName": "Icinga for Windows",
            "folderUid": "QSsH1n9nk",
            "updated": "2022-05-31T12:34:28Z",
            "updatedBy": {
              "avatarUrl": "/avatar/56fe94225e225b888240c4c7f5533989",
              "id": 3,
              "name": "cstein"
            }
          },
          "name": "template-disks",
          "type": "timeseries",
          "uid": "btxIyornz",
          "version": 4
        },
        "maxPerRow": 4,
        "options": {
          "legend": {
            "calcs": [
              "lastNotNull"
            ],
            "displayMode": "table",
            "placement": "bottom"
          },
          "tooltip": {
            "mode": "multi",
            "sort": "asc"
          }
        },
        "repeat": "disks",
        "repeatDirection": "h",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric =~ /^(${disks}::ifw_partitionspace::free)/ or r.metric =~ /^(${disks}::ifw_partitionspace::used)/)\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Value"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"warn\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric =~ /^(${disks}::ifw_partitionspace::free)/ or r.metric =~ /^(${disks}::ifw_partitionspace::used)/)\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Warning\") }))",
            "refId": "Warning"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"crit\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric =~ /^(${disks}::ifw_partitionspace::free)/ or r.metric =~ /^(${disks}::ifw_partitionspace::used)/)\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Critical\") }))",
            "refId": "Critical"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"max\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric =~ /^(${disks}::ifw_partitionspace::free)/ or r.metric =~ /^(${disks}::ifw_partitionspace::used)/)\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: (r.metric + \" Size\") }))",
            "refId": "Size"
          }
        ],
        "title": "${hostname} Disk ${disks}",
        "transformations": [
          {
            "id": "renameByRegex",
            "options": {
              "regex": "::ifw_partitionspace::used",
              "renamePattern": " Partition Used"
            }
          },
          {
            "id": "renameByRegex",
            "options": {
              "regex": "::ifw_partitionspace::free",
              "renamePattern": " Partition Free"
            }
          }
        ],
        "type": "timeseries"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 42
        },
        "id": 24,
        "panels": [],
        "repeat": "networkinterface",
        "title": "Network Interface $networkinterface",
        "type": "row"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "lineInterpolation": "linear",
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": [
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Linkspeed"
              },
              "properties": [
                {
                  "id": "unit",
                  "value": "bytes"
                },
                {
                  "id": "displayName",
                  "value": "Linkspeed"
                }
              ]
            },
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Bytes sent/sec"
              },
              "properties": [
                {
                  "id": "unit",
                  "value": "bytes"
                },
                {
                  "id": "displayName",
                  "value": "Bytes sent/sec"
                }
              ]
            },
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Bytes received/sec"
              },
              "properties": [
                {
                  "id": "unit",
                  "value": "bytes"
                },
                {
                  "id": "displayName",
                  "value": "Bytes received/sec"
                }
              ]
            },
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Usage"
              },
              "properties": [
                {
                  "id": "unit",
                  "value": "bytes"
                },
                {
                  "id": "displayName",
                  "value": "Usage"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 0,
          "y": 43
        },
        "id": 31,
        "options": {
          "legend": {
            "calcs": [],
            "displayMode": "list",
            "placement": "bottom"
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric == \"${networkinterface}::ifw_networkinterface::linkspeed\")\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Linkspeed"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric == \"${networkinterface}::ifw_networkinterface::bytessentsec\")\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Bytes sent/sec"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric == \"${networkinterface}::ifw_networkinterface::bytesreceivedsec\")\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Bytes received/sec"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric == \"${networkinterface}::ifw_networkinterface::bytestotalsec\")\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Usage"
          }
        ],
        "title": "Usage",
        "type": "timeseries"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "lineInterpolation": "linear",
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": [
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Packets sent/sec"
              },
              "properties": [
                {
                  "id": "unit",
                  "value": "pps"
                },
                {
                  "id": "displayName",
                  "value": "Packets sent/sec"
                }
              ]
            },
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Packets received/sec"
              },
              "properties": [
                {
                  "id": "unit",
                  "value": "pps"
                },
                {
                  "id": "displayName",
                  "value": "Packets received/sec"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 12,
          "y": 43
        },
        "id": 38,
        "options": {
          "legend": {
            "calcs": [],
            "displayMode": "list",
            "placement": "bottom"
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric == \"${networkinterface}::ifw_networkinterface::packetssentsec\")\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Packets sent/sec"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric == \"${networkinterface}::ifw_networkinterface::packetsreceivedsec\")\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Packets received/sec"
          }
        ],
        "title": "Network Packets",
        "type": "timeseries"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "lineInterpolation": "linear",
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": [
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Packet received errors"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Packets received errors"
                }
              ]
            },
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "Packets sent errors"
              },
              "properties": [
                {
                  "id": "displayName",
                  "value": "Packets sent errors"
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 0,
          "y": 51
        },
        "id": 46,
        "options": {
          "legend": {
            "calcs": [],
            "displayMode": "list",
            "placement": "bottom"
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric == \"${networkinterface}::ifw_networkinterface::packetsreceivederrors\")\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Packet received errors"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric == \"${networkinterface}::ifw_networkinterface::packetsoutbounderrors\")\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Packets sent errors"
          }
        ],
        "title": "Packet Errors",
        "type": "timeseries"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 76
        },
        "id": 77,
        "panels": [],
        "title": "Windows Service Details",
        "type": "row"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 6,
          "w": 3,
          "x": 0,
          "y": 77
        },
        "id": 110,
        "options": {
          "colorMode": "value",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "8.5.3",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"summary::ifw_service::count\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Count"
          }
        ],
        "title": "Total",
        "type": "stat"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 6,
          "w": 3,
          "x": 3,
          "y": 77
        },
        "id": 106,
        "options": {
          "colorMode": "value",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "8.5.3",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"summary::ifw_service::running\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Running"
          }
        ],
        "title": "Running",
        "type": "stat"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 6,
          "w": 3,
          "x": 6,
          "y": 77
        },
        "id": 111,
        "options": {
          "colorMode": "value",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "8.5.3",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"summary::ifw_service::stopped\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Stopped"
          }
        ],
        "title": "Stopped",
        "type": "stat"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 6,
          "w": 3,
          "x": 9,
          "y": 77
        },
        "id": 108,
        "options": {
          "colorMode": "value",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "8.5.3",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"summary::ifw_service::paused\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "Paused"
          }
        ],
        "title": "Paused",
        "type": "stat"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 6,
          "w": 3,
          "x": 12,
          "y": 77
        },
        "id": 107,
        "options": {
          "colorMode": "value",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "8.5.3",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"summary::ifw_service::pendingstarted\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "PendingStarted"
          }
        ],
        "title": "Pending Started",
        "type": "stat"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 6,
          "w": 3,
          "x": 15,
          "y": 77
        },
        "id": 109,
        "options": {
          "colorMode": "value",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "8.5.3",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"summary::ifw_service::pendingcontinued\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "PendingContinued"
          }
        ],
        "title": "Pending Continued",
        "type": "stat"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 6,
          "w": 3,
          "x": 18,
          "y": 77
        },
        "id": 104,
        "options": {
          "colorMode": "value",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "8.5.3",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"summary::ifw_service::pendingstopped\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "PendingStopped"
          }
        ],
        "title": "Pending Stopped",
        "type": "stat"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 6,
          "w": 3,
          "x": 21,
          "y": 77
        },
        "id": 105,
        "options": {
          "colorMode": "value",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "8.5.3",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "hide": false,
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    r.metric == \"summary::ifw_service::pendingpaused\"\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "PendingPaused"
          }
        ],
        "title": "Pending Paused",
        "type": "stat"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "YnAJdFX7z"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "mappings": [
              {
                "options": {
                  "1": {
                    "index": 0,
                    "text": "Stopped"
                  },
                  "2": {
                    "index": 1,
                    "text": "Start Pending"
                  },
                  "3": {
                    "index": 2,
                    "text": "Stop Pending"
                  },
                  "4": {
                    "index": 3,
                    "text": "Running"
                  },
                  "5": {
                    "index": 4,
                    "text": "Continue Pending"
                  },
                  "6": {
                    "index": 5,
                    "text": "Pause Pending"
                  },
                  "7": {
                    "index": 6,
                    "text": "Paused"
                  }
                },
                "type": "value"
              }
            ],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 7,
          "w": 12,
          "x": 0,
          "y": 83
        },
        "id": 86,
        "options": {
          "colorMode": "value",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "textMode": "auto"
        },
        "pluginVersion": "8.5.3",
        "repeat": "services",
        "repeatDirection": "h",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "YnAJdFX7z"
            },
            "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._field == \"value\" and\r\n    r.hostname == \"${hostname}\" and\r\n    (r.metric =~ /^(${services}::ifw_service::state)/)\r\n  )\r\n  |> map(fn: (r) => ({ _value:r._value, _time:r._time, _field: r.metric }))",
            "refId": "A"
          }
        ],
        "title": "${services} Status",
        "type": "stat"
      }
    ],
    "refresh": "",
    "schemaVersion": 36,
    "style": "dark",
    "tags": [],
    "templating": {
      "list": [
        {
          "current": {
            "selected": false,
            "text": "sales-net-hyperv",
            "value": "sales-net-hyperv"
          },
          "datasource": {
            "type": "influxdb",
            "uid": "YnAJdFX7z"
          },
          "definition": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: -5m)\r\n  |> filter(fn: (r) =>\r\n    r.metric =~ /::ifw_/\r\n  )\r\n  |> keyValues(keyColumns: [\"hostname\"])\r\n  |> keep(columns: [\"_value\"])\r\n  |> unique(column: \"_value\")",
          "description": "The Icinga hostname to display data for",
          "hide": 0,
          "includeAll": false,
          "label": "Hostname",
          "multi": false,
          "name": "hostname",
          "options": [],
          "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: -5m)\r\n  |> filter(fn: (r) =>\r\n    r.metric =~ /::ifw_/\r\n  )\r\n  |> keyValues(keyColumns: [\"hostname\"])\r\n  |> keep(columns: [\"_value\"])\r\n  |> unique(column: \"_value\")",
          "refresh": 2,
          "regex": "",
          "skipUrlSync": false,
          "sort": 0,
          "type": "query"
        },
        {
          "description": "Data Bucket for InfluxDB2 for Icinga monitoring data",
          "hide": 2,
          "label": "Icinga Data",
          "name": "influxbucket",
          "query": "icinga_demo",
          "skipUrlSync": false,
          "type": "constant"
        },
        {
          "allValue": "",
          "current": {
            "selected": false,
            "text": "All",
            "value": "$__all"
          },
          "datasource": {
            "type": "influxdb",
            "uid": "YnAJdFX7z"
          },
          "definition": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: -5m)\r\n  |> filter(fn: (r) =>\r\n    r.hostname == \"${hostname}\"\r\n  )\r\n  |> keyValues(keyColumns: [\"_measurement\"])\r\n  |> keep(columns: [\"service\"])\r\n  |> map(fn: (r) => ({ _value:r.service }))\r\n  |> unique(column: \"_value\")",
          "description": "The Icinga service to display data for",
          "hide": 0,
          "includeAll": true,
          "label": "Service",
          "multi": false,
          "name": "service",
          "options": [],
          "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: -5m)\r\n  |> filter(fn: (r) =>\r\n    r.hostname == \"${hostname}\"\r\n  )\r\n  |> keyValues(keyColumns: [\"_measurement\"])\r\n  |> keep(columns: [\"service\"])\r\n  |> map(fn: (r) => ({ _value:r.service }))\r\n  |> unique(column: \"_value\")",
          "refresh": 2,
          "regex": "",
          "skipUrlSync": false,
          "sort": 0,
          "type": "query"
        },
        {
          "allValue": "",
          "current": {
            "selected": true,
            "text": [
              "total"
            ],
            "value": [
              "total"
            ]
          },
          "datasource": {
            "type": "influxdb",
            "uid": "YnAJdFX7z"
          },
          "definition": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: -5m)\r\n  |> filter(fn: (r) =>\r\n    r.hostname == \"${hostname}\" and\r\n    r._field == \"value\" and\r\n    r.metric =~ /^(.*?)::ifw_cpu::load/\r\n  )\r\n  |> keyValues(keyColumns: [\"metric\"])\r\n  |> keep(columns: [\"_value\"])\r\n  |> unique(column: \"_value\")",
          "hide": 0,
          "includeAll": true,
          "multi": true,
          "name": "cpucores",
          "options": [],
          "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: -5m)\r\n  |> filter(fn: (r) =>\r\n    r.hostname == \"${hostname}\" and\r\n    r._field == \"value\" and\r\n    r.metric =~ /^(.*?)::ifw_cpu::load/\r\n  )\r\n  |> keyValues(keyColumns: [\"metric\"])\r\n  |> keep(columns: [\"_value\"])\r\n  |> unique(column: \"_value\")",
          "refresh": 2,
          "regex": "^(.*?)::ifw_cpu::load",
          "skipUrlSync": false,
          "sort": 3,
          "type": "query"
        },
        {
          "allValue": "",
          "current": {
            "selected": true,
            "text": [
              "All"
            ],
            "value": [
              "$__all"
            ]
          },
          "datasource": {
            "type": "influxdb",
            "uid": "YnAJdFX7z"
          },
          "definition": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: -5m)\r\n  |> filter(fn: (r) =>\r\n    r.hostname == \"${hostname}\" and\r\n    r._field == \"value\" and\r\n    r.metric =~ /::ifw_partitionspace/\r\n  )\r\n  |> keyValues(keyColumns: [\"metric\"])\r\n  |> keep(columns: [\"_value\"])\r\n  |> unique(column: \"_value\")",
          "description": "Available disks for the specified host",
          "hide": 0,
          "includeAll": true,
          "label": "Disks",
          "multi": true,
          "name": "disks",
          "options": [],
          "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: -5m)\r\n  |> filter(fn: (r) =>\r\n    r.hostname == \"${hostname}\" and\r\n    r._field == \"value\" and\r\n    r.metric =~ /::ifw_partitionspace/\r\n  )\r\n  |> keyValues(keyColumns: [\"metric\"])\r\n  |> keep(columns: [\"_value\"])\r\n  |> unique(column: \"_value\")",
          "refresh": 2,
          "regex": "/^(.*?)::/",
          "skipUrlSync": false,
          "sort": 1,
          "type": "query"
        },
        {
          "allValue": "",
          "current": {
            "selected": true,
            "text": [
              "All"
            ],
            "value": [
              "$__all"
            ]
          },
          "datasource": {
            "type": "influxdb",
            "uid": "YnAJdFX7z"
          },
          "definition": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: -5m)\r\n  |> filter(fn: (r) =>\r\n    r.hostname == \"${hostname}\" and\r\n    r._field == \"value\" and\r\n    r.metric =~ /::ifw_pagefile/\r\n  )\r\n  |> keyValues(keyColumns: [\"metric\"])\r\n  |> keep(columns: [\"_value\"])\r\n  |> unique(column: \"_value\")",
          "description": "All available page files for a certain host",
          "hide": 0,
          "includeAll": true,
          "label": "Pagefiles",
          "multi": true,
          "name": "pagefiles",
          "options": [],
          "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: -5m)\r\n  |> filter(fn: (r) =>\r\n    r.hostname == \"${hostname}\" and\r\n    r._field == \"value\" and\r\n    r.metric =~ /::ifw_pagefile/\r\n  )\r\n  |> keyValues(keyColumns: [\"metric\"])\r\n  |> keep(columns: [\"_value\"])\r\n  |> unique(column: \"_value\")",
          "refresh": 2,
          "regex": "/^(.*?)::/",
          "skipUrlSync": false,
          "sort": 1,
          "type": "query"
        },
        {
          "current": {
            "selected": true,
            "text": [
              "All"
            ],
            "value": [
              "$__all"
            ]
          },
          "datasource": {
            "type": "influxdb",
            "uid": "YnAJdFX7z"
          },
          "definition": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: -5m)\r\n  |> filter(fn: (r) =>\r\n    r.hostname == \"${hostname}\" and\r\n    r._field == \"value\" and\r\n    r.metric =~ /::ifw_networkinterface/\r\n  )\r\n  |> keyValues(keyColumns: [\"metric\"])\r\n  |> keep(columns: [\"_value\"])\r\n  |> unique(column: \"_value\")",
          "description": "All available Network Interfaces on the specified host",
          "hide": 0,
          "includeAll": true,
          "label": "Network Interfaces",
          "multi": true,
          "name": "networkinterface",
          "options": [],
          "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: -5m)\r\n  |> filter(fn: (r) =>\r\n    r.hostname == \"${hostname}\" and\r\n    r._field == \"value\" and\r\n    r.metric =~ /::ifw_networkinterface/\r\n  )\r\n  |> keyValues(keyColumns: [\"metric\"])\r\n  |> keep(columns: [\"_value\"])\r\n  |> unique(column: \"_value\")",
          "refresh": 2,
          "regex": "/^(.*?)::/",
          "skipUrlSync": false,
          "sort": 1,
          "type": "query"
        },
        {
          "current": {
            "selected": true,
            "text": [
              "All"
            ],
            "value": [
              "$__all"
            ]
          },
          "datasource": {
            "type": "influxdb",
            "uid": "YnAJdFX7z"
          },
          "definition": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: -5m)\r\n  |> filter(fn: (r) =>\r\n    r.hostname == \"${hostname}\" and\r\n    r._field == \"value\" and\r\n    r.metric =~ /::ifw_service::state/\r\n  )\r\n  |> keyValues(keyColumns: [\"metric\"])\r\n  |> keep(columns: [\"_value\"])\r\n  |> unique(column: \"_value\")",
          "description": "Status of specified Windows Service",
          "hide": 0,
          "includeAll": true,
          "label": "Windows Services",
          "multi": true,
          "name": "services",
          "options": [],
          "query": "from(bucket: \"${influxbucket}\")\r\n  |> range(start: -5m)\r\n  |> filter(fn: (r) =>\r\n    r.hostname == \"${hostname}\" and\r\n    r._field == \"value\" and\r\n    r.metric =~ /::ifw_service::state/\r\n  )\r\n  |> keyValues(keyColumns: [\"metric\"])\r\n  |> keep(columns: [\"_value\"])\r\n  |> unique(column: \"_value\")",
          "refresh": 1,
          "regex": "/^(.*?)::/",
          "skipUrlSync": false,
          "sort": 1,
          "type": "query"
        }
      ]
    },
    "time": {
      "from": "now-3h",
      "to": "now"
    },
    "timepicker": {},
    "timezone": "",
    "title": "Windows-Base",
    "uid": "KlRvJ79nz",
    "version": 234,
    "weekStart": ""
}
