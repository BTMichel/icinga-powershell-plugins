object CheckCommand "Invoke-IcingaCheckEventlog" {
    import "PowerShell Base"

    arguments += {
        "-Before" = {
            description = "Used to specify time data of which point the plugin should stop considering event logs. You can either use a fixed date and time like '2021/01/30 12:00:00', a fixed day '2021/01/30' or use more dynamic approaches like '1d', '10h' and so on.  By using '2h' for example, log files of the last 2 hours will be ignored. Please ensure to manually set the `-After` argument and ensure you go back further in time with the `-After` argument than the `-Before` argument.  Allowed units: ms, s, m, h, d, w, M, y"
            value = "$IcingaCheckEventlog_Object_Before$"
            order = 16
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckEventlog_Switchparameter_NoPerfData$"
            order = 99
        }
        "-IncludeMessage" = {
            description = "Used to specify an array of messages within the eventlog to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeMessage$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 11
        }
        "-IncludeSource" = {
            description = "Used to specify an array of message sources within the eventlog to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeSource$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 13
        }
        "-After" = {
            description = "Used to specify time data of which point the plugin should start to read event logs from. You can either use a fixed date and time like '2021/01/30 12:00:00', a fixed day '2021/01/30' or use more dynamic approaches like '1d', '10h' and so on.  Allowed units: ms, s, m, h, d, w, M, y"
            value = "$IcingaCheckEventlog_Object_After$"
            order = 15
        }
        "-IncludeEventId" = {
            description = "Used to specify an array of events identified by their id to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeEventId$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 5
        }
        "-LogName" = {
            description = "Used to specify a certain log."
            value = "$IcingaCheckEventlog_String_LogName$"
            order = 4
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckEventlog' "
            order = 0
        }
        "-ThresholdValue" = {
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = "$IcingaCheckEventlog_String_ThresholdValue$"
            order = 100
        }
        "-ExcludeSource" = {
            description = "Used to specify an array of message sources within the eventlog to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeSource$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 14
        }
        "-ExcludeUsername" = {
            description = "Used to specify an array of usernames within the eventlog to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeUsername$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 8
        }
        "-ExcludeEntryType" = {
            description = "Used to specify an array of entry types within the eventlog to be excluded. Please note that `SuccessAudit` and `FailureAudit` only apply to the `Security` EventLog."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeEntryType$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 10
        }
        "-IncludeEntryType" = {
            description = "Used to specify an array of entry types within the eventlog to be included. Please note that `SuccessAudit` and `FailureAudit` only apply to the `Security` EventLog."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeEntryType$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 9
        }
        "-MaxEntries" = {
            description = "Allows to limit the amount of log entries fetched by Get-WinEvent, to increase performance and reduce system load impact Should match the average amount of log files written for the intended time range filtered"
            value = "$IcingaCheckEventlog_Int32_MaxEntries$"
            order = 17
        }
        "-Verbosity" = {
            value = "$IcingaCheckEventlog_Int32_Verbosity$"
            order = 18
        }
        "-ExcludeEventId" = {
            description = "Used to specify an array of events identified by their id to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeEventId$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 6
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold."
            value = "$IcingaCheckEventlog_Object_Critical$"
            order = 3
        }
        "-DisableTimeCache" = {
            set_if = "$IcingaCheckEventlog_Switchparameter_DisableTimeCache$"
            order = 99
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold."
            value = "$IcingaCheckEventlog_Object_Warning$"
            order = 2
        }
        "-IncludeUsername" = {
            description = "Used to specify an array of usernames within the eventlog to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeUsername$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 7
        }
        "-ExcludeMessage" = {
            description = "Used to specify an array of messages within the eventlog to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeMessage$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 12
        }
    }
    vars.IcingaCheckEventlog_Switchparameter_NoPerfData = false
    vars.IcingaCheckEventlog_Switchparameter_DisableTimeCache = false
}
