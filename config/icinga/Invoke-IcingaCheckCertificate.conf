object CheckCommand "Invoke-IcingaCheckCertificate" {
    import "PowerShell Base"

    arguments += {
        "-CertStorePath" = {
            description = "Used to specify which path within the CertStore should be checked."
            value = "$IcingaCheckCertificate_Object_CertStorePath$"
            order = 8
        }
        "-CriticalEnd" = {
            description = "Used to specify a Critical range for the end date of an certificate. In this case a string. Allowed units include: ms, s, m, h, d, w, M, y"
            value = "$IcingaCheckCertificate_Object_CriticalEnd$"
            order = 4
        }
        "-Verbosity" = {
            description = "Other"
            value = "$IcingaCheckCertificate_Int32_Verbosity$"
            order = 11
        }
        "-CertSubject" = {
            description = "Used to specify an array of Subjects, which are used to determine what certificate to check, within the CertStore."
            value = {{
                var arr = macro("$IcingaCheckCertificate_Array_CertSubject$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 7
        }
        "-IgnoreEmpty" = {
            set_if = "$IcingaCheckCertificate_Switchparameter_IgnoreEmpty$"
            order = 99
        }
        "-WarningEnd" = {
            description = "Used to specify a Warning range for the end date of an certificate. In this case a string. Allowed units include: ms, s, m, h, d, w, M, y"
            value = "$IcingaCheckCertificate_Object_WarningEnd$"
            order = 3
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckCertificate' "
            order = 0
        }
        "-CriticalStart" = {
            description = "Used to specify a date. The start date of the certificate has to be past the date specified, otherwise the check results in critical. Use carefully. Use format like: 'yyyy-MM-dd'"
            value = "$IcingaCheckCertificate_Object_CriticalStart$"
            order = 2
        }
        "-ThresholdValue" = {
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = "$IcingaCheckCertificate_String_ThresholdValue$"
            order = 100
        }
        "-CertStore" = {
            description = "Used to specify which CertStore to check. Valid choices are '*', 'LocalMachine', 'CurrentUser'"
            value = "$IcingaCheckCertificate_String_CertStore$"
            order = 5
        }
        "-Trusted" = {
            set_if = "$IcingaCheckCertificate_Switchparameter_Trusted$"
            order = 99
        }
        "-CertPaths" = {
            description = "Used to specify an array of paths on your system, where certificate files are. Use with CertName."
            value = {{
                var arr = macro("$IcingaCheckCertificate_Array_CertPaths$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 9
        }
        "-CertThumbprint" = {
            description = "Used to specify an array of Thumbprints, which are used to determine what certificate to check, within the CertStore."
            value = {{
                var arr = macro("$IcingaCheckCertificate_Array_CertThumbprint$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 6
        }
        "-Recurse" = {
            set_if = "$IcingaCheckCertificate_Switchparameter_Recurse$"
            order = 99
        }
        "-CertName" = {
            description = "Used to specify an array of certificate names of certificate files to check. Use with CertPaths."
            value = {{
                var arr = macro("$IcingaCheckCertificate_Array_CertName$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 10
        }
    }
    vars.IcingaCheckCertificate_Switchparameter_Recurse = false
    vars.IcingaCheckCertificate_Switchparameter_Trusted = false
    vars.IcingaCheckCertificate_Switchparameter_IgnoreEmpty = false
}
